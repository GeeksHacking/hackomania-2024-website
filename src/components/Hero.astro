---
import { Image } from 'astro:assets'

import Countdown from './Countdown.astro'
import MovingBackground from './MovingBackground.astro'
import BrowserFrame from './BrowserFrame.astro'
import HackOManiaLogo from './HackOManiaLogo.astro'

import HeartSprite from '../assets/sprites/heart.png'
import ConsoleSprite from '../assets/sprites/console.png'
import MouseSprite from '../assets/sprites/mouse.png'
import BatterySprite from '../assets/sprites/battery.png'
import SpectaclesSprite from '../assets/sprites/spectacles.png'
import LightbulbSprite from '../assets/sprites/light-bulb.png'
import PointerSprite from '../assets/sprites/pointer.png'
---

<!-- Desktop View -->
<div id="hero-container" class="hidden md:block">
  <div class="flex flex-col gap-5 justify-center items-center relative" style="width:1220px; height: 553px;">
    <MovingBackground customClasses='h-[140%]' />
    <Image class="to-animate absolute z-30 bottom-12 right-24" src={HeartSprite} width={151} densities={[2, 3]} quality="max" alt="" />
    <Image class="to-animate absolute z-30 bottom-12 left-16" src={ConsoleSprite} width={247} densities={[2, 3]} quality="max" alt="" />
    <Image id="spectacles" class="absolute z-30 top-7 left-[337px]" src={SpectaclesSprite} width={308} densities={[2, 3]} quality="max" alt="" />
    <Image class="to-animate absolute z-30 top-0 left-12" src={LightbulbSprite} width={220} densities={[2, 3]} quality="max" alt="" />
    <Image class="to-animate absolute z-30 top-50 right-4" src={BatterySprite} width={203} densities={[2, 3]} quality="max" alt="" />
    <Image class="absolute z-10 top-50 left-0" src={MouseSprite} width={375} densities={[2, 3]} quality="max" alt="" />
    <div class="z-20 w-[775px] relative">
      <div class="absolute z-30 -top-8 right-6">
        <Countdown />
      </div>
      <BrowserFrame dark>
        <div class="flex justify-center items-center py-10">
          <HackOManiaLogo />
        </div>
      </BrowserFrame>
    </div>
    <div class="rounded-lg bg-app-red text-white font-serif font-bold flex justify-center items-center p-5 relative">
      <span class="uppercase">Registration coming soon!</span>
      <Image id="hero-animation-trigger" class="absolute z-10 top-4 -right-20 cursor-pointer" src={PointerSprite} width={120} densities={[2, 3]} quality="max" alt="" />
    </div>
  </div>
</div>

<!-- Mobile view -->
<div class="flex flex-col gap-5 md:hidden justify-center items-center w-full relative px-4">
  <MovingBackground customClasses='h-[140%]' />
  <Image class="absolute z-30 bottom-12 -right-4" width={66} densities={[1.5, 2, 3]} quality="max" src={BatterySprite}  alt="" />
  <Image class="absolute z-30 bottom-12 -left-4" width={102} densities={[1.5, 2, 3]} quality="max" src={ConsoleSprite} alt="" />
  <Image class="absolute z-30 -top-4 left-20" width={80} densities={[1.5, 2, 3]} quality="max" src={SpectaclesSprite}  alt="" />

  <div class="z-20 w-full relative">
    <div class="absolute z-30 -top-4 right-6">
      <Countdown />
    </div>

    <BrowserFrame size="small" dark>
      <div class="flex justify-center items-center pt-4 pb-10">
        <HackOManiaLogo />
      </div>
    </BrowserFrame>
  </div>
  <div class="rounded-lg bg-app-red text-white font-serif font-bold text-xs flex justify-center items-center p-3 relative">
    <span class="uppercase">Registration coming soon!</span>
    <Image class="absolute z-10 top-1 -right-10" src={PointerSprite} width={60} densities={[2, 3]} quality="max" alt="" />
  </div>
</div>

<!-- Scale logic on desktop -->
<script>
  function adjustScale() {
    const isMobile = window.innerWidth < 768
    const heroContainer = document.getElementById('hero-container')
    if (!heroContainer || isMobile) return
    // Choose baseWidth based on viewport width: 384px for small screens, 1226px for medium and up
    const baseWidth = window.innerWidth < 768 ? 384 : 1226
    const scaleFactor = Math.min(window.innerWidth / baseWidth, 1) // Calculate scale factor, max scale is 1

    heroContainer.style.transform = `scale(${scaleFactor})`
    heroContainer.style.transformOrigin = 'top center'
  }

  window.addEventListener('resize', adjustScale)
  adjustScale() // Initial adjustment
</script>

<!-- Countdown logic -->
<script lang="js">
  const endDate = new Date('2024-04-06T08:00:00')

  function updateCountdown() {
    const now = new Date()
    const timeDifference = endDate.getTime() - now.getTime()

    let days = Math.floor(timeDifference / (1000 * 60 * 60 * 24))
    let hours = Math.floor((timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))
    let minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60))
    let seconds = Math.floor((timeDifference % (1000 * 60)) / 1000)

    const timeUnits = {
      days: days,
      hours: hours,
      minutes: minutes,
      seconds: seconds,
    }

    for (timeUnit of Object.keys(timeUnits)) {
      // if we left with a time unit of single digit, we still want to display the '0' in front of it so that it display better.
      if (`${timeUnits[timeUnit]}`.length == 1) {
        timeUnits[timeUnit] = `0${timeUnits[timeUnit]}`
      }
      document.getElementById(`${timeUnit}`).textContent = `${timeUnits[timeUnit]}`
      document.querySelectorAll(`#${timeUnit}`).forEach((element) => {
        element.textContent = `${timeUnits[timeUnit]}`
      })
    }
  }

  // set initial countdown text
  updateCountdown()

  // set countdown text every second
  setInterval(updateCountdown, 1000)
</script>

<!-- Animate hero container sprites -->
<script lang="js">
document.addEventListener('DOMContentLoaded', () => {
  const heroContainer = document.getElementById('hero-container');
  const sprites = heroContainer.querySelectorAll('img.to-animate');
  const animationTriggerEl = document.getElementById('hero-animation-trigger');

  const animateSprites = () => {
    sprites.forEach((sprite) => {
      const depthFactor = 3;
      // Generate random translateX and translateY values
      const translateX = (Math.random() - 0.5) * 40 * depthFactor;
      const translateY = (Math.random() - 0.5) * 40 * depthFactor;

      sprite.style.transition = 'transform 1.5s linear'; // Smooth transition for the movement
      sprite.style.transform = `translate(${translateX}px, ${translateY}px)`;
    });
  };

  animationTriggerEl.addEventListener('click', (event) => {
    // if (heroContainer.getAttribute('data-state')) return;
    heroContainer.setAttribute('data-state', 'animated');
    animateSprites();
    setInterval(animateSprites, 1500);
  });
});
</script>