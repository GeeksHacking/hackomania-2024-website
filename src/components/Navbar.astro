---
interface Props {
	navItems: string[];
}
const { navItems } = Astro.props;
---

<div
	class="sticky top-0 w-full flex flex-row gap-4 items-center p-4 justify-between bg-app-background z-50">
	<header>
		<a
			href="/"
			class="font-code font-semibold text-app-purple"
			>HackOMania 2024</a
		>
	</header>

	<button class="nav-hamburger-menu-button block lg:hidden">
		<svg
			width="30"
			height="30"
			viewBox="0 0 30 30"
			fill="none"
			xmlns="http://www.w3.org/2000/svg">
			<path
				d="M3.75 9.375H26.25C27.285 9.375 28.125 8.535 28.125 7.5C28.125 6.465 27.285 5.625 26.25 5.625H3.75C2.715 5.625 1.875 6.465 1.875 7.5C1.875 8.535 2.715 9.375 3.75 9.375ZM26.25 13.125H3.75C2.715 13.125 1.875 13.965 1.875 15C1.875 16.035 2.715 16.875 3.75 16.875H26.25C27.285 16.875 28.125 16.035 28.125 15C28.125 13.965 27.285 13.125 26.25 13.125ZM26.25 20.625H3.75C2.715 20.625 1.875 21.465 1.875 22.5C1.875 23.535 2.715 24.375 3.75 24.375H26.25C27.285 24.375 28.125 23.535 28.125 22.5C28.125 21.465 27.285 20.625 26.25 20.625Z"
				fill="black"
			></path>
		</svg>
	</button>

	<!-- Nav bar shown on mobile/tablet viewport -->
	<nav
		class="lg:hidden absolute top-10 right-4 p-4 items-start justify-center flex flex-col gap-4 opacity-0 hidden bg-white rounded shadow transition-all">
		{
			navItems.map((item) => (
				<a
					href={`#${item}`}
					class="nav-item group flex flex-row items-center gap-1 font-code font-semibold text-black w-full">
					<span>{item.toUpperCase()}</span>
				</a>
			))
		}
	</nav>

	<!-- Nav bar shown on desktop viewport -->
	<nav
		class="hidden lg:flex flex-row items-center justify-end gap-7 flex-grow text-sm">
		{
			navItems.map((item) => (
				<a
					href={`#${item}`}
					class="nav-item group flex flex-row items-center gap-1 font-code font-semibold text-black">
					<svg
						class="group-hover:visible invisible"
						width="12"
						height="12"
						viewBox="0 0 58 48"
						fill="none"
						xmlns="http://www.w3.org/2000/svg">
						<path
							d="M0.96875 10.125V0.75H10.3438V10.125H0.96875ZM10.3438 10.125V0.75H19.7188V10.125H10.3438ZM19.7188 19.5V10.125H29.0938V19.5H19.7188ZM29.0938 19.5V10.125H38.4688V19.5H29.0938ZM38.4688 28.875V19.5H47.844V28.875H38.4688ZM47.844 28.875V19.5H57.219V28.875H47.844ZM19.7188 38.25V28.875H29.0938V38.25H19.7188ZM29.0938 38.25V28.875H38.4688V38.25H29.0938ZM0.96875 47.625V38.25H10.3438V47.625H0.96875ZM10.3438 47.625V38.25H19.7188V47.625H10.3438Z"
							fill="#AD2F55"
						/>
					</svg>
					<span>{item.toUpperCase()}</span>
				</a>
			))
		}
	</nav>
</div>

<script lang="js">
	const onNavItemClick = () => {
		const navbarEl = document.querySelector("nav");
		if (navbarEl) {
			if (navbarEl.classList.contains("hidden")) {
				navbarEl.classList.remove("hidden");
				navbarEl.classList.remove("opacity-0");
			} else {
				navbarEl.classList.add("opacity-0");
				setTimeout(() => {
					navbarEl.classList.add("hidden");
				}, 300);
			}
		}
	};

	document.querySelectorAll(".nav-item").forEach((el) => {
		el.addEventListener("click", onNavItemClick);
	});
	document
		.querySelector(".nav-hamburger-menu-button")
		?.addEventListener("click", onNavItemClick);

	// Hide nav menu on mobile when clicking outside of nav menu
	document.addEventListener("click", function (event) {
		const navbarEl = document.querySelector("nav");
		const toggleButton = document.querySelector(".nav-hamburger-menu-button");
		if (!navbarEl || !toggleButton) return;
		const clickInsideNav = navbarEl.contains(event.target);
		const clickOnToggleButton = toggleButton.contains(event.target);

		if (
			!clickInsideNav &&
			!clickOnToggleButton &&
			!navbarEl.classList.contains("hidden")
		) {
			navbarEl.classList.add("opacity-0");
			setTimeout(() => {
				navbarEl.classList.add("hidden");
			}, 300);
		}
	});
</script>
